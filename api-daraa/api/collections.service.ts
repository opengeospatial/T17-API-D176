/**
 * Daraa
 * This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.
 *
 * The version of the OpenAPI document: 9.3.62
 * Contact: mgalluch@cubewerx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { CollectionInfoJson } from '../model/models';
import { CollectionsJson } from '../model/models';
import { ThemesJson } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class CollectionsService {

    protected basePath = 'https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Daraa';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Remove a collection from this data store.
     * @param collectionId The identifier of a collection in this data store.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdDelete(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any>;
    public collectionsCollectionIdDelete(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdDelete(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdDelete(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json',
                'text/xml',
                'text/html',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A collection available in this data store.
     * @param collectionId The identifier of a collection in this data store.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'json' | 'xml' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<CollectionInfoJson>;
    public collectionsCollectionIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'json' | 'xml' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<CollectionInfoJson>>;
    public collectionsCollectionIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'json' | 'xml' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<CollectionInfoJson>>;
    public collectionsCollectionIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'json' | 'xml' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pretty, 'pretty');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/xml',
                'text/html',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<CollectionInfoJson>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * The set of collections available in this data store.
     * @param limit The maximum number of items to present in the response document.
     * @param offset The zero-based index within the result set from which the server will begin presenting results in the response document.  If offset is greater or equal to the number of items in the result set, the server will return an empty list.
     * @param bbox Only elements that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the \&#39;bbox-crs\&#39; parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If an element has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param bboxCrs The coordinate reference system of the specified bbox.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsGet(limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'xml' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<CollectionsJson>;
    public collectionsGet(limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'xml' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<HttpResponse<CollectionsJson>>;
    public collectionsGet(limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'xml' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<HttpEvent<CollectionsJson>>;
    public collectionsGet(limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'xml' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/xml' | 'text/html' | 'application/problem+json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (bbox) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (bboxCrs !== undefined && bboxCrs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bboxCrs, 'bbox-crs');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pretty, 'pretty');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/xml',
                'text/html',
                'application/problem+json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<CollectionsJson>(`${this.configuration.basePath}/collections`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new (empty) collection to this data store.
     * @param body The schema of the collection.  Accepted formats are GML Simple Features (Level 0) or CubeWerx CTL.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsPost(body: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any>;
    public collectionsPost(body: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public collectionsPost(body: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public collectionsPost(body: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling collectionsPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json',
                'text/xml',
                'text/html',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'text/xml',
            'application/x-cubewerx-ctl'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/collections`,
            body,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * The set of collections available in this data store, organized into a theme hierarchy (see OGC 18-045, section A.6).
     * @param bbox Only elements that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the \&#39;bbox-crs\&#39; parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If an element has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param bboxCrs The coordinate reference system of the specified bbox.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param mode Experimental.  If \&quot;full\&quot;, the complete collection objects are returned.  If \&quot;refsOnly\&quot;, only references to the collections are returned.  If \&quot;idsOnly\&quot;, only the collection IDs are returned.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public themesGet(bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'html', mode?: 'full' | 'refsOnly' | 'idsOnly', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml', context?: HttpContext}): Observable<ThemesJson>;
    public themesGet(bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'html', mode?: 'full' | 'refsOnly' | 'idsOnly', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml', context?: HttpContext}): Observable<HttpResponse<ThemesJson>>;
    public themesGet(bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'html', mode?: 'full' | 'refsOnly' | 'idsOnly', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml', context?: HttpContext}): Observable<HttpEvent<ThemesJson>>;
    public themesGet(bbox?: Array<number>, bboxCrs?: string, f?: 'json' | 'html', mode?: 'full' | 'refsOnly' | 'idsOnly', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bbox) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (bboxCrs !== undefined && bboxCrs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bboxCrs, 'bbox-crs');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (mode !== undefined && mode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mode, 'mode');
        }
        if (pretty !== undefined && pretty !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pretty, 'pretty');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<ThemesJson>(`${this.configuration.basePath}/themes`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
