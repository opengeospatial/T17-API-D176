/**
 * Daraa
 * This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.
 *
 * The version of the OpenAPI document: 9.3.62
 * Contact: mgalluch@cubewerx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class SourceImagesService {

    protected basePath = 'https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Daraa';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * The set of source images of a collection.
     * @param collectionId The identifier of a collection in this data store.
     * @param limit The maximum number of items to present in the response document.
     * @param offset The zero-based index within the result set from which the server will begin presenting results in the response document.  If offset is greater or equal to the number of items in the result set, the server will return an empty list.
     * @param bbox Only elements that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the \&#39;bbox-crs\&#39; parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If an element has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param bboxCrs The coordinate reference system of the specified bbox.
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only elements that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdImagesGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, datetime?: string, f?: 'stac' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<object>;
    public collectionsCollectionIdImagesGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, datetime?: string, f?: 'stac' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<HttpResponse<object>>;
    public collectionsCollectionIdImagesGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, datetime?: string, f?: 'stac' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<HttpEvent<object>>;
    public collectionsCollectionIdImagesGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', limit?: number, offset?: number, bbox?: Array<number>, bboxCrs?: string, datetime?: string, f?: 'stac' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdImagesGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (limit !== undefined && limit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limit, 'limit');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (bbox) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (bboxCrs !== undefined && bboxCrs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bboxCrs, 'bbox-crs');
        }
        if (datetime !== undefined && datetime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>datetime, 'datetime');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pretty, 'pretty');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/stac+json',
                'text/html',
                'application/problem+json',
                'text/xml',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<object>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/images`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove a source image from a collection.
     * @param collectionId The identifier of a collection in this data store.
     * @param imageId The identifier of a source image in this collection.
     * @param removeFromFilesystem Whether or not the source image (and its auxiliary files, if any) should be removed from the filesystem.  Specify as true only if you know that this source image isn\&#39;t also registered with another collection.  The default value is true if the source image is in the filesystem directory that an HTTP POST request to the images endpoint places source images in, and false otherwise.
     * @param updateTiles Whether or not the map tiles should be updated.  Typically this is desired, but if multiple updates to the same collection are being performed serially, it\&#39;s more efficient to specify updateTiles&#x3D;false for all but the final update.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdImagesImageIdDelete(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, removeFromFilesystem?: boolean, updateTiles?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any>;
    public collectionsCollectionIdImagesImageIdDelete(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, removeFromFilesystem?: boolean, updateTiles?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdImagesImageIdDelete(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, removeFromFilesystem?: boolean, updateTiles?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdImagesImageIdDelete(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, removeFromFilesystem?: boolean, updateTiles?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdImagesImageIdDelete.');
        }
        if (imageId === null || imageId === undefined) {
            throw new Error('Required parameter imageId was null or undefined when calling collectionsCollectionIdImagesImageIdDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (removeFromFilesystem !== undefined && removeFromFilesystem !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>removeFromFilesystem, 'removeFromFilesystem');
        }
        if (updateTiles !== undefined && updateTiles !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>updateTiles, 'updateTiles');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json',
                'text/xml',
                'text/html',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/images/${encodeURIComponent(String(imageId))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Metadata about a source image of a collection, including links to the actual source image file(s).
     * @param collectionId The identifier of a collection in this data store.
     * @param imageId The identifier of a source image in this collection.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdImagesImageIdGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, f?: 'stac' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<any>;
    public collectionsCollectionIdImagesImageIdGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, f?: 'stac' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdImagesImageIdGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, f?: 'stac' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdImagesImageIdGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', imageId: string, f?: 'stac' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/stac+json' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdImagesImageIdGet.');
        }
        if (imageId === null || imageId === undefined) {
            throw new Error('Required parameter imageId was null or undefined when calling collectionsCollectionIdImagesImageIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pretty, 'pretty');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/stac+json',
                'text/html',
                'application/problem+json',
                'text/xml',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/images/${encodeURIComponent(String(imageId))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new source image to a collection.  If a single source image consists of multiple files (e.g., the main image plus auxilliary files sharing the same base filename), send them in the request body as a ZIP or tar archive.
     * @param collectionId The identifier of a collection in this data store.
     * @param body A geo-referenced source image of an accepted format (e.g., \&quot;GeoTIFF\&quot;).
     * @param updateTiles Whether or not the map tiles should be updated.  Typically this is desired, but if multiple updates to the same collection are being performed serially, it\&#39;s more efficient to specify updateTiles&#x3D;false for all but the final update.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdImagesPost(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', body: Blob, updateTiles?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any>;
    public collectionsCollectionIdImagesPost(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', body: Blob, updateTiles?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdImagesPost(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', body: Blob, updateTiles?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdImagesPost(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', body: Blob, updateTiles?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdImagesPost.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling collectionsCollectionIdImagesPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (updateTiles !== undefined && updateTiles !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>updateTiles, 'updateTiles');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (cwApiKeyHeader) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('CubeWerx-API-Key', localVarCredential);
        }

        // authentication (cwApiKeyQuery) required
        localVarCredential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('apiKey', localVarCredential);
        }

        // authentication (cwAuth) required
        localVarCredential = this.configuration.lookupCredential('cwAuth');
        if (localVarCredential) {
        }

        // authentication (httpBearer) required
        localVarCredential = this.configuration.lookupCredential('httpBearer');
        if (localVarCredential) {
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/problem+json',
                'text/xml',
                'text/html',
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'image/tiff; application=geotiff',
            'application/zip',
            'application/tar'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/images`,
            body,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
