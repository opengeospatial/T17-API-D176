/**
 * DGGS 1.0 server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.19-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

import { Dapa } from '../model/models';
import { Exception } from '../model/models';
import { Variables } from '../model/models';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class DAPAService {

    protected basePath = 'https://tb16.geo-solutions.it/geoserver/ogc/dggs';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * retrieve a time series for selected variables for each station in an area and apply functions on the values of each time step
     * This DAPA endpoint returns a time series for an area (parameter &#x60;bbox&#x60;, &#x60;coords&#x60; or &#x60;coordsRef&#x60;) in the selected time interval or at the selected time instant (parameter &#x60;datetime&#x60;).   All values in the area for each requested variable (parameter &#x60;variables&#x60;) are aggregated for each time step and each of the requested statistical functions (parameter &#x60;functions&#x60;) is applied to the aggregated values.
     * @param collectionId local identifier of a collection
     * @param bbox Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the  CRS includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  The CRS of the values is WGS 84 in longitude/latitude order (CRS84) unless a different coordinate reference system is specified in the parameter &#x60;bbox-crs&#x60;.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param geom A Well Known Text representation of a (MULTI)POLYGON geometry as defined in Simple Feature Access - Part 1: Common Architecture.
     * @param zones Comma separated list of zone identifiers
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only features that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param functions The statistical function(s) to apply when aggregating multiple values to a single value.
     * @param variables A comma-separated list of values with names of observable properties that should be returned in the response. More information about the available properties can be retrieved from the &#x60;../variables&#x60; path. The default is to return all observed properties.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdProcessesAreaaggregateSpaceGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<string>;
    public collectionsCollectionIdProcessesAreaaggregateSpaceGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<string>>;
    public collectionsCollectionIdProcessesAreaaggregateSpaceGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<string>>;
    public collectionsCollectionIdProcessesAreaaggregateSpaceGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdProcessesAreaaggregateSpaceGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bbox) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (geom !== undefined && geom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>geom, 'geom');
        }
        if (zones) {
            zones.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zones');
            })
        }
        if (datetime !== undefined && datetime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>datetime, 'datetime');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (functions) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                functions.join(COLLECTION_FORMATS['csv']), 'functions');
        }
        if (variables) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                variables.join(COLLECTION_FORMATS['csv']), 'variables');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/csv',
                'application/geo+json',
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/processes/area:aggregate-space`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrieve a time series for selected variables for each zone in an area and apply functions on all values
     * This DAPA endpoint returns observation values for an area (parameter &#x60;bbox&#x60;, &#x60;coord&#x60; or &#x60;coordRef&#x60;) in the selected time interval or at the selected time instant (parameter &#x60;datetime&#x60;).   All values for each requested variable (parameter &#x60;variables&#x60;) are aggregated and each of the requested statistical functions (parameter &#x60;functions&#x60;) is applied to the aggregated values.
     * @param collectionId local identifier of a collection
     * @param resolution 
     * @param bbox Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the  CRS includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  The CRS of the values is WGS 84 in longitude/latitude order (CRS84) unless a different coordinate reference system is specified in the parameter &#x60;bbox-crs&#x60;.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param geom A Well Known Text representation of a (MULTI)POLYGON geometry as defined in Simple Feature Access - Part 1: Common Architecture.
     * @param zones Comma separated list of zone identifiers
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only features that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param functions The statistical function(s) to apply when aggregating multiple values to a single value.
     * @param variables A comma-separated list of values with names of observable properties that should be returned in the response. More information about the available properties can be retrieved from the &#x60;../variables&#x60; path. The default is to return all observed properties.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdProcessesAreaaggregateSpaceTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', resolution: number, bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<string>;
    public collectionsCollectionIdProcessesAreaaggregateSpaceTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', resolution: number, bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<string>>;
    public collectionsCollectionIdProcessesAreaaggregateSpaceTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', resolution: number, bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<string>>;
    public collectionsCollectionIdProcessesAreaaggregateSpaceTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', resolution: number, bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdProcessesAreaaggregateSpaceTimeGet.');
        }
        if (resolution === null || resolution === undefined) {
            throw new Error('Required parameter resolution was null or undefined when calling collectionsCollectionIdProcessesAreaaggregateSpaceTimeGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bbox) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (geom !== undefined && geom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>geom, 'geom');
        }
        if (zones) {
            zones.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zones');
            })
        }
        if (resolution !== undefined && resolution !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>resolution, 'resolution');
        }
        if (datetime !== undefined && datetime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>datetime, 'datetime');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (functions) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                functions.join(COLLECTION_FORMATS['csv']), 'functions');
        }
        if (variables) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                variables.join(COLLECTION_FORMATS['csv']), 'variables');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/csv',
                'application/geo+json',
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/processes/area:aggregate-space-time`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrieve a time series for selected variables for each station in an area and apply functions on the values of each time series
     * This DAPA endpoint returns a time series for each station in an area (parameter &#x60;box&#x60;, &#x60;coords&#x60; or &#x60;coordsRef&#x60;) in the selected time interval or at the selected time instant (parameter &#x60;datetime&#x60;).  Each time series contains daily observation values for each selected variable (parameter &#x60;variables&#x60;) for which a value has been observed at the station during the time interval.
     * @param collectionId local identifier of a collection
     * @param bbox Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the  CRS includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  The CRS of the values is WGS 84 in longitude/latitude order (CRS84) unless a different coordinate reference system is specified in the parameter &#x60;bbox-crs&#x60;.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param geom A Well Known Text representation of a (MULTI)POLYGON geometry as defined in Simple Feature Access - Part 1: Common Architecture.
     * @param zones Comma separated list of zone identifiers
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only features that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param functions The statistical function(s) to apply when aggregating multiple values to a single value.
     * @param variables A comma-separated list of values with names of observable properties that should be returned in the response. More information about the available properties can be retrieved from the &#x60;../variables&#x60; path. The default is to return all observed properties.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdProcessesAreaaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<string>;
    public collectionsCollectionIdProcessesAreaaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<string>>;
    public collectionsCollectionIdProcessesAreaaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<string>>;
    public collectionsCollectionIdProcessesAreaaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdProcessesAreaaggregateTimeGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bbox) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (geom !== undefined && geom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>geom, 'geom');
        }
        if (zones) {
            zones.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zones');
            })
        }
        if (datetime !== undefined && datetime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>datetime, 'datetime');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (functions) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                functions.join(COLLECTION_FORMATS['csv']), 'functions');
        }
        if (variables) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                variables.join(COLLECTION_FORMATS['csv']), 'variables');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/csv',
                'application/geo+json',
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/processes/area:aggregate-time`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrieve a time series for selected variables for each station in an area
     * This DAPA endpoint returns observation values at the selected location (parameter &#x60;coord&#x60; or &#x60;coordRef&#x60;) in the selected time interval or at the selected time instant (parameter &#x60;datetime&#x60;).  All values in the time interval for each requested variable (parameter &#x60;variables&#x60;) are aggregated and each of the requested statistical functions (parameter &#x60;functions&#x60;) is applied to the aggregated values.
     * @param collectionId local identifier of a collection
     * @param bbox Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the  CRS includes a vertical axis (height or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Minimum value, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Maximum value, coordinate axis 3 (optional)  The CRS of the values is WGS 84 in longitude/latitude order (CRS84) unless a different coordinate reference system is specified in the parameter &#x60;bbox-crs&#x60;.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.  If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param geom A Well Known Text representation of a (MULTI)POLYGON geometry as defined in Simple Feature Access - Part 1: Common Architecture.
     * @param zones Comma separated list of zone identifiers
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only features that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param variables A comma-separated list of values with names of observable properties that should be returned in the response. More information about the available properties can be retrieved from the &#x60;../variables&#x60; path. The default is to return all observed properties.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdProcessesArearetrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<string>;
    public collectionsCollectionIdProcessesArearetrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<string>>;
    public collectionsCollectionIdProcessesArearetrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<string>>;
    public collectionsCollectionIdProcessesArearetrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', bbox?: Array<number>, geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdProcessesArearetrieveGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bbox) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (geom !== undefined && geom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>geom, 'geom');
        }
        if (zones) {
            zones.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zones');
            })
        }
        if (datetime !== undefined && datetime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>datetime, 'datetime');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (variables) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                variables.join(COLLECTION_FORMATS['csv']), 'variables');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/csv',
                'application/geo+json',
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/processes/area:retrieve`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * list the available data retrieval patterns
     * @param collectionId local identifier of a collection
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdProcessesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<Dapa>;
    public collectionsCollectionIdProcessesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<Dapa>>;
    public collectionsCollectionIdProcessesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<Dapa>>;
    public collectionsCollectionIdProcessesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdProcessesGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<Dapa>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/processes`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrieve a time series for selected variables at a position
     * This DAPA endpoint returns observation values at the selected location (parameter &#x60;coords&#x60; or &#x60;coordsRef&#x60;) in the selected time interval or at the selected time instant (parameter &#x60;datetime&#x60;).   All values in the time interval for each requested variable (parameter &#x60;variables&#x60;) are aggregated and each of the requested statistical functions (parameter &#x60;functions&#x60;) is applied to the aggregated values.
     * @param collectionId local identifier of a collection
     * @param geom A Well Known Text representation of a (MULTI)POLYGON geometry as defined in Simple Feature Access - Part 1: Common Architecture.
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only features that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param functions The statistical function(s) to apply when aggregating multiple values to a single value.
     * @param variables A comma-separated list of values with names of observable properties that should be returned in the response. More information about the available properties can be retrieved from the &#x60;../variables&#x60; path. The default is to return all observed properties.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdProcessesPositionaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<string>;
    public collectionsCollectionIdProcessesPositionaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<string>>;
    public collectionsCollectionIdProcessesPositionaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<string>>;
    public collectionsCollectionIdProcessesPositionaggregateTimeGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, datetime?: string, f?: string, functions?: Array<'std-dev' | 'count' | 'max' | 'mean' | 'min' | 'sum'>, variables?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdProcessesPositionaggregateTimeGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (geom !== undefined && geom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>geom, 'geom');
        }
        if (datetime !== undefined && datetime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>datetime, 'datetime');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (functions) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                functions.join(COLLECTION_FORMATS['csv']), 'functions');
        }
        if (variables) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                variables.join(COLLECTION_FORMATS['csv']), 'variables');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/csv',
                'application/geo+json',
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/processes/position:aggregate-time`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * retrieve a time series for selected variables at a position
     * This DAPA endpoint returns a time series with daily observation values at the selected location (parameter &#x60;coords&#x60; or &#x60;coordsRef&#x60;) in the selected time interval or at the selected time instant (parameter &#x60;datetime&#x60;).  The time series contains values for each selected variable (parameter &#x60;variables&#x60;) for which a value can be interpolated at the location.
     * @param collectionId local identifier of a collection
     * @param geom A Well Known Text representation of a (MULTI)POLYGON geometry as defined in Simple Feature Access - Part 1: Common Architecture.
     * @param zones Comma separated list of zone identifiers
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339. Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only features that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.  If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param variables A comma-separated list of values with names of observable properties that should be returned in the response. More information about the available properties can be retrieved from the &#x60;../variables&#x60; path. The default is to return all observed properties.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdProcessesPositionretrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<string>;
    public collectionsCollectionIdProcessesPositionretrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<string>>;
    public collectionsCollectionIdProcessesPositionretrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<string>>;
    public collectionsCollectionIdProcessesPositionretrieveGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', geom?: string, zones?: Array<string>, datetime?: string, f?: string, variables?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/csv' | 'application/geo+json' | 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdProcessesPositionretrieveGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (geom !== undefined && geom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>geom, 'geom');
        }
        if (zones) {
            zones.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'zones');
            })
        }
        if (datetime !== undefined && datetime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>datetime, 'datetime');
        }
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }
        if (variables) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                variables.join(COLLECTION_FORMATS['csv']), 'variables');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/csv',
                'application/geo+json',
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/processes/position:retrieve`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * fetch the observable properties included in this observation collection
     * @param collectionId local identifier of a collection
     * @param f The format of the response. If no value is provided, the standard http rules apply,i.e., the accept header shall be used to determine the format.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdVariablesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<Variables>;
    public collectionsCollectionIdVariablesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpResponse<Variables>>;
    public collectionsCollectionIdVariablesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<HttpEvent<Variables>>;
    public collectionsCollectionIdVariablesGet(collectionId: 'dggs:H3' | 'dggs:TB16-Pix' | 'dggs:s2-h3' | 'dggs:s2-rpix', f?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html', context?: HttpContext}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdVariablesGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>f, 'f');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' = 'json';
        if(localVarHttpHeaderAcceptSelected && localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        }

        return this.httpClient.get<Variables>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/variables`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
